package hr.fer.zemris.java.hw06.crypto;

/**
 * This class provides utility functions for program {@link Crypto}.
 * 
 * @author Bruno IljazoviÄ‡
 */
public class Util {
	
	/** Array of hexadecimal representations of integers in [0, 15] range. */
	private static char[] hexChars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
			'a', 'b', 'c', 'd', 'e', 'f'
	};

	/**
	 * Returns the integer in base 10 generated from the given character - number in
	 * base 16.
	 *
	 * @param c
	 *            Hexadecimal character.
	 * @return the integer in base 10 equivalent to the given value, or -1 if the
	 *         character is not a hexadecimal digit.
	 */
	private static int hexToInt(char c) {
		if (c >= '0' && c <= '9') {
			return c - '0';
		}
		if (c >= 'a' && c <= 'f') {
			return 10 + (c - 'a');
		}
		return -1;
	}
	
	/**
	 * Converts the given string into byte array and compares its length with the
	 * given one. Returns null if they are not the same, generated array otherwise.
	 *
	 * @param key
	 *            number in hexadecimal format
	 * @param expectedLength
	 *            the expected length
	 * @return generated byte array if the length is expected, null otherwise.
	 */
	public static byte[] checkByteLength(String key, int expectedLength) {
		byte[] bytes = null;
		try {
			bytes = hextobyte(key);
			if (bytes.length != expectedLength) return null;
		} catch(IllegalArgumentException ex) {
			return null;
		}
		return bytes;
	}	

	/**
	 * Converts the given string - number in hexadecimal format - to the byte array
	 * where each two consecutive digits represent one byte. If the length of the
	 * string is odd, exception is thrown.
	 * <p> Both upper-case and lower-case are valid.
	 *
	 * @param keyText
	 *            number in hexadecimal format
	 * @return byte array where each element represents two consecutive digits in
	 *         the given string.
	 * @throws IllegalArgumentException
	 *             if the given string is invalid.
	 */
	public static byte[] hextobyte(String keyText) {
		if (keyText.length() % 2 == 1) {
			throw new IllegalArgumentException("Hex string must be even-sized.");
		}
		
		keyText = keyText.toLowerCase();
		
		byte[] result = new byte[keyText.length() / 2];
		
		char[] keyTextChars = keyText.toCharArray();
		for (int i = 0; i < keyTextChars.length; i += 2) {
			int firstCharHex = hexToInt(keyTextChars[i]);
			int secondCharHex = hexToInt(keyTextChars[i + 1]);
			
			if (firstCharHex == -1 || secondCharHex == -1) {
				throw new IllegalArgumentException("Hex string has invalid characters.");
			}

			result[i / 2] = (byte) (firstCharHex * 16 + secondCharHex);
		}
		
		return result;
	}
	
	/**
	 * Converts the given byte array to the string where each element of the array
	 * is converted to the double digit hexadecimal number. Hexadecimal digits are
	 * all lower-case.
	 *
	 * @param bytearray
	 *            the byte array
	 * @return hex-coded representation of the given array
	 */
	public static String bytetohex(byte[] bytearray) {
		StringBuilder result = new StringBuilder(bytearray.length * 2);
		
		for (byte b : bytearray) {
			int intFromByte = b;
			if (intFromByte < 0) intFromByte += 256;

			result.append(hexChars[intFromByte / 16]);
			result.append(hexChars[intFromByte % 16]);
		}
		
		return result.toString();
	}
}
